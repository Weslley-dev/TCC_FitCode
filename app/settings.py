"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 5.2.5.
"""

import os
from pathlib import Path
from urllib.parse import urlparse


# Paths
BASE_DIR = Path(__file__).resolve().parent.parent

# Segurança / Debug
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-36a13o0%3$!o)j=7uui-9p5+lo_)g^a_kn^=*teu73=8d&7h1)')
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'
# ALLOWED_HOSTS - pode ser configurado via variável de ambiente
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '').split(',') if os.environ.get('ALLOWED_HOSTS') else [
    'tccfitcode-production.up.railway.app',
    '*.up.railway.app',
    '*.onrender.com',
    'localhost',
    '127.0.0.1',
    '*'
]

# URL base para QR Codes
BASE_URL = os.environ.get('BASE_URL', 'http://localhost:8000')

# Configuração do banco - usar PostgreSQL apenas se DATABASE_URL estiver definida, senão SQLite
if os.environ.get('DATABASE_URL') and not os.environ.get('DATABASE_URL').startswith('sqlite'):
    # Produção com PostgreSQL (Railway, Render PostgreSQL, etc.)
    DATABASE_URL = os.environ.get('DATABASE_URL')
    url = urlparse(DATABASE_URL)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': url.path[1:],
            'USER': url.username,
            'PASSWORD': url.password,
            'HOST': url.hostname,
            'PORT': url.port,
        }
    }
else:
    # Desenvolvimento local e Render com SQLite
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Configurações CSRF para Railway e Render
CSRF_TRUSTED_ORIGINS = [
    'https://tccfitcode-production.up.railway.app',
    'https://*.up.railway.app',
    'https://*.onrender.com',
    'http://tccfitcode-production.up.railway.app',  # Fallback para HTTP
    'http://*.onrender.com',  # Fallback para HTTP
]
CSRF_COOKIE_SECURE = False  # Temporariamente False para debug
SESSION_COOKIE_SECURE = False  # Temporariamente False para debug
CSRF_COOKIE_HTTPONLY = False
CSRF_USE_SESSIONS = False
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_DOMAIN = None
CSRF_COOKIE_PATH = '/'
CSRF_FAILURE_VIEW = 'django.views.csrf.csrf_failure'

# Apps
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'accounts',
    'django.contrib.humanize',
    'aparelhos',
    'django_cleanup.apps.CleanupConfig',
]

# Middleware
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # 'whitenoise.middleware.WhiteNoiseMiddleware',  # Para servir arquivos estáticos
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Ativar WhiteNoise em produção (Railway, Render, etc.)
if os.environ.get('RAILWAY_ENVIRONMENT') or os.environ.get('RENDER'):
    MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')

ROOT_URLCONF = 'app.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],  
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'accounts.context_processors.user_profile',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'


AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Configurações de autenticação
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/profile/'
LOGOUT_REDIRECT_URL = '/login/'

LANGUAGE_CODE = 'pt-br'
TIME_ZONE = 'America/Sao_Paulo'
USE_I18N = True
USE_TZ = True


STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Configurações do WhiteNoise para arquivos estáticos
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Configurações para servir arquivos de mídia em produção
if os.environ.get('RAILWAY_ENVIRONMENT') or os.environ.get('RENDER'):
    # Em produção, usar WhiteNoise para servir arquivos de mídia
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'media'),
    ]


FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  

DATA_UPLOAD_MAX_MEMORY_SIZE = 100 * 1024 * 1024  


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
